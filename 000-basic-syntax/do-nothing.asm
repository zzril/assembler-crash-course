SECTION .text
; This is where our code goes.
; Other sections may be used e. g. for global variables.

global _start
; Marking the special `_start` label (see below) as global,
; so it will be visible / exposed in the object file generated by the assembler,
; and the linker will then know where to put the entry point in the final program.

_start:
; The entry point.
; This is where execution starts once the OS is done loading our program
; (i. e. loading it into memory and setting up
; the necessary kernel data structures for the new to-be-created process).

mov rax, 60 ; Move the syscall code for `sys_exit` into eax.
            ; (Syscall numbers can be obtained e. g. from
            ; [here](https://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/),
            ; or from `/usr/include/asm/unistd_64.h`.
            ; If the parameters differ from those for the corresponding libc wrappers,
            ; this should generally be documented in the corresponding manpage.)

mov edi, 0  ; 1st argument for sys_exit: int error_code
            ; (This will automatically clear the upper half of rdi.)

syscall     ; Execute the syscall, terminating the process.

